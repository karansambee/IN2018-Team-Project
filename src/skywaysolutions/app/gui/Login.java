package skywaysolutions.app.gui;

import skywaysolutions.app.gui.control.StatusBar;
import skywaysolutions.app.gui.control.VTextField;
import skywaysolutions.app.utils.AccessorManager;
import skywaysolutions.app.utils.CheckedException;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.Locale;

/**
 * This class provides the login interface.
 *
 * @author Alfred Manville
 */
public class Login extends JDialogx {
    private JPanel Root;
    private JPanel contentPanel;
    private JPanel headerPanel;
    private VTextField loginTextField;
    private JLabel passwordLabel;
    private JPasswordField passwordPasswordField;
    private JButton buttonExit;
    private JButton buttonLogin;
    private StatusBar statusBar;

    /**
     * This constructs a new instance of the login dialog.
     *
     * @param owner    The owner of the dialog or null for no owner.
     * @param reusable If the dialog can be shown again after being hidden.
     * @param manager  The accessor manager containing all the interfaces.
     */
    public Login(Frame owner, boolean reusable, AccessorManager manager) {
        super(owner, "Login", reusable);
        //Setup form contents
        setContentPane(Root);
        getRootPane().setDefaultButton(buttonLogin);
        //Setup form closing events
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                hideDialog();
            }
        });
        //Setup login text field
        try {
            loginTextField.setup("[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)*[a-z0-9](?:[a-z0-9-]*[a-z0-9])?", statusBar, "Invalid email address!", false, true);
        } catch (CheckedException e) {
            statusBar.setStatus(e, 2500);
        }
        //Setup button events
        buttonExit.addActionListener(e -> {
            if (!statusBar.isInHelpMode()) hideDialog();
        });
        buttonLogin.addActionListener(e -> {
            if (!statusBar.isInHelpMode()) {
                try {
                    if (manager.staffAccessor.authenticateAccount(loginTextField.getText(), String.valueOf(passwordPasswordField.getPassword())))
                        hideDialog();
                    else statusBar.setStatus("Password Incorrect", null, 2500);
                    passwordPasswordField.setText("");
                } catch (CheckedException ex) {
                    statusBar.setStatus(ex, 2500);
                }
            }
        });
        //Setup Help
        statusBar.registerComponentForHelp(loginTextField, "Enter the email address of you user.");
        statusBar.registerComponentForHelp(passwordPasswordField, "Enter the password of your user.\n" +
                "If you've forgotten your password, please contact a system administrator to change it.");
        statusBar.registerComponentForHelp(passwordLabel, "If you've forgotten your password, please contact a system administrator to change it.");
        //Finalize form
        pack();
        dsize = getSize();
        statusBar.createPrompt(this);
    }

    public void hideDialog() {
        loginTextField.setText("");
        passwordPasswordField.setText("");
        loginTextField.requestFocusInWindow();
        statusBar.deactivateHelp();
        super.hideDialog();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        Root = new JPanel();
        Root.setLayout(new GridBagLayout());
        Root.setMinimumSize(new Dimension(360, 240));
        Root.setPreferredSize(new Dimension(360, 240));
        contentPanel = new JPanel();
        contentPanel.setLayout(new GridBagLayout());
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(0, 5, 0, 5);
        Root.add(contentPanel, gbc);
        headerPanel = new JPanel();
        headerPanel.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 2;
        gbc.weightx = 1.0;
        gbc.weighty = 0.2;
        gbc.fill = GridBagConstraints.BOTH;
        contentPanel.add(headerPanel, gbc);
        loginTextField = new VTextField();
        Font loginTextFieldFont = this.$$$getFont$$$(null, -1, 16, loginTextField.getFont());
        if (loginTextFieldFont != null) loginTextField.setFont(loginTextFieldFont);
        loginTextField.setMargin(new Insets(2, 6, 2, 6));
        loginTextField.setPreferredSize(new Dimension(96, 30));
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.weightx = 0.6;
        gbc.weighty = 0.4;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        contentPanel.add(loginTextField, gbc);
        final JLabel label1 = new JLabel();
        Font label1Font = this.$$$getFont$$$(null, -1, 16, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setPreferredSize(new Dimension(64, 22));
        label1.setText("Email Address:");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weightx = 0.4;
        gbc.weighty = 0.4;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        contentPanel.add(label1, gbc);
        passwordLabel = new JLabel();
        Font passwordLabelFont = this.$$$getFont$$$(null, -1, 16, passwordLabel.getFont());
        if (passwordLabelFont != null) passwordLabel.setFont(passwordLabelFont);
        passwordLabel.setPreferredSize(new Dimension(64, 22));
        passwordLabel.setText("Password:");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.weightx = 0.4;
        gbc.weighty = 0.4;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        contentPanel.add(passwordLabel, gbc);
        passwordPasswordField = new JPasswordField();
        Font passwordPasswordFieldFont = this.$$$getFont$$$(null, -1, 16, passwordPasswordField.getFont());
        if (passwordPasswordFieldFont != null) passwordPasswordField.setFont(passwordPasswordFieldFont);
        passwordPasswordField.setMargin(new Insets(2, 6, 2, 6));
        passwordPasswordField.setPreferredSize(new Dimension(96, 30));
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 2;
        gbc.weightx = 0.6;
        gbc.weighty = 0.4;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        contentPanel.add(passwordPasswordField, gbc);
        buttonExit = new JButton();
        buttonExit.setPreferredSize(new Dimension(64, 30));
        buttonExit.setText("Exit");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.weightx = 0.4;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        contentPanel.add(buttonExit, gbc);
        buttonLogin = new JButton();
        buttonLogin.setPreferredSize(new Dimension(96, 30));
        buttonLogin.setText("Login");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 3;
        gbc.weightx = 0.6;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        contentPanel.add(buttonLogin, gbc);
        statusBar = new StatusBar();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 4;
        gbc.gridwidth = 2;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        contentPanel.add(statusBar.$$$getRootComponent$$$(), gbc);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return Root;
    }
}
