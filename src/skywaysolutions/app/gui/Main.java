package skywaysolutions.app.gui;

import skywaysolutions.app.gui.control.StatusBar;
import skywaysolutions.app.gui.tab.*;
import skywaysolutions.app.utils.AccessorManager;
import skywaysolutions.app.utils.CheckedException;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import java.util.Locale;
import java.util.concurrent.CountDownLatch;

/**
 * This class provides the main form.
 *
 * @author Alfred Manville
 */
public class Main extends JFrame {
    private JPanel Root;
    private JPanel HeaderPanel;
    private JPanel TabContainerPanel;
    private JPanel FooterPanel;
    private JButton aboutButton;
    private JPanel titlePanel;
    private JButton logoutButton;
    private JButton exitButton;
    private JTabbedPane tabbedPaneMain;
    private final ArrayList<ITab> tabs = new ArrayList<>();
    private final DashboardTab dashboardTab = new DashboardTab();
    private final StockTab stockTab = new StockTab();
    private final CustomerTab customerTab = new CustomerTab();
    private final AccountsTab accountsTab = new AccountsTab();
    private final RatesTab ratesTab = new RatesTab();
    private final StockTypesTab stockTypesTab = new StockTypesTab();
    private final DatabaseTab databaseTab = new DatabaseTab();
    private StatusBar statusBar;
    private final Prompt prompt;
    private final Login login;
    private final About about;
    private final AccessorManager manager;
    private final CountDownLatch shutDownLatch;

    public Main(String title, AccessorManager accessorManager, CountDownLatch shutdownLatch) throws CheckedException {
        super(title);
        //Initialize form
        setContentPane(Root);
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        //Store shutdown latch for decrementing when form terminates.
        this.shutDownLatch = shutdownLatch;
        //Define the manager that holds the accessor
        this.manager = accessorManager;
        accessorManager.assureTable(null);
        this.manager.rateAccessor.assureUSDCurrency();
        this.manager.staffAccessor.assureDefaultAdministratorAccount();
        //Add window listener
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowOpened(WindowEvent e) {
                newLogin();
            }

            @Override
            public void windowClosing(WindowEvent e) {
                manager.staffAccessor.logoutAccount();
                hideFrame();
            }
        });
        //Add button events
        exitButton.addActionListener(e -> hideFrame());
        logoutButton.addActionListener(e -> newLogin());
        aboutButton.addActionListener(e -> showAbout());
        pack();
        //Create the prompt
        prompt = new Prompt(this, "", "", null, 0, true);
        //Create the login form
        login = new Login(this, true, this.manager);
        //Create the about form
        about = new About(this, true, "AirVia ATS", "(C) Skyway Solutions 2023\nAll rights reserved, licensed to AirVia LTD.");
        //Open form and setup sub-controls
        setVisible(true);
        statusBar.createPrompt(this);
        //Create and set-up tabs
        tabs.add(dashboardTab);
        tabs.add(stockTab);
        tabs.add(customerTab);
        tabs.add(accountsTab);
        tabs.add(ratesTab);
        tabs.add(stockTypesTab);
        tabs.add(databaseTab);
        for (ITab c : tabs) c.setup(this, prompt, statusBar, manager);
        setMinimumSize(new Dimension(640, 480));
    }

    private void showAbout() {
        about.showDialog();
    }

    private void newLogin() {
        tabbedPaneMain.removeAll();
        //Begin login sequence
        manager.staffAccessor.logoutAccount();
        login.showDialog();
        if (manager.staffAccessor.getLoggedInAccountEmail() == null) hideFrame();
        else {
            //Add tabs
            dashboardTab.refresh();
            try {
                for (ITab c : tabs)
                    if (c.accessAllowed()) {
                        tabbedPaneMain.addTab(c.getCaption(), (Component) c);
                        c.refresh();
                    }
            } catch (CheckedException e) {
                statusBar.setStatus(e, 2500);
            }
        }
    }

    private void hideFrame() {
        setVisible(false);
        dispose();
        shutDownLatch.countDown();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        Root = new JPanel();
        Root.setLayout(new GridBagLayout());
        Root.setMinimumSize(new Dimension(640, 480));
        Root.setPreferredSize(new Dimension(640, 480));
        HeaderPanel = new JPanel();
        HeaderPanel.setLayout(new GridBagLayout());
        HeaderPanel.setPreferredSize(new Dimension(24, 15));
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 0.15;
        gbc.fill = GridBagConstraints.BOTH;
        Root.add(HeaderPanel, gbc);
        titlePanel = new JPanel();
        titlePanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        HeaderPanel.add(titlePanel, gbc);
        aboutButton = new JButton();
        Font aboutButtonFont = this.$$$getFont$$$("Segoe UI", Font.BOLD, 20, aboutButton.getFont());
        if (aboutButtonFont != null) aboutButton.setFont(aboutButtonFont);
        aboutButton.setMaximumSize(new Dimension(78, 78));
        aboutButton.setMinimumSize(new Dimension(78, 78));
        aboutButton.setPreferredSize(new Dimension(78, 78));
        aboutButton.setText("(A)");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.weighty = 1.0;
        gbc.anchor = GridBagConstraints.EAST;
        gbc.fill = GridBagConstraints.VERTICAL;
        HeaderPanel.add(aboutButton, gbc);
        TabContainerPanel = new JPanel();
        TabContainerPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.weighty = 0.7;
        gbc.fill = GridBagConstraints.BOTH;
        Root.add(TabContainerPanel, gbc);
        tabbedPaneMain = new JTabbedPane();
        tabbedPaneMain.setTabLayoutPolicy(1);
        TabContainerPanel.add(tabbedPaneMain, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(200, 200), null, 0, false));
        FooterPanel = new JPanel();
        FooterPanel.setLayout(new GridBagLayout());
        FooterPanel.setPreferredSize(new Dimension(24, 15));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.weightx = 1.0;
        gbc.weighty = 0.15;
        gbc.fill = GridBagConstraints.BOTH;
        Root.add(FooterPanel, gbc);
        logoutButton = new JButton();
        Font logoutButtonFont = this.$$$getFont$$$("Segoe UI", Font.BOLD, 14, logoutButton.getFont());
        if (logoutButtonFont != null) logoutButton.setFont(logoutButtonFont);
        logoutButton.setText("Logout");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 0.5;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        FooterPanel.add(logoutButton, gbc);
        exitButton = new JButton();
        Font exitButtonFont = this.$$$getFont$$$("Segoe UI", Font.BOLD, 14, exitButton.getFont());
        if (exitButtonFont != null) exitButton.setFont(exitButtonFont);
        exitButton.setText("Exit");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.weightx = 0.5;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        FooterPanel.add(exitButton, gbc);
        statusBar = new StatusBar();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.fill = GridBagConstraints.BOTH;
        Root.add(statusBar.$$$getRootComponent$$$(), gbc);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return Root;
    }
}
